

buildscript {
  repositories {
      jcenter()
  }
}

//apply plugin: 'sonar-runner'


allprojects {
  apply plugin: 'java'
  apply plugin: 'eclipse-wtp'
  apply plugin: 'project-report'
  apply plugin: 'jacoco'
  apply plugin: 'checkstyle'
  apply plugin: 'pmd'

  test {
    ignoreFailures = true
  }

  checkstyle {
    showViolations = false
    ignoreFailures = true
  }
  
  pmd {
    ignoreFailures = true
  }

  jacoco {
    toolVersion = "0.7.1.201405082137"
  }

  group = 'me.ineson'
  version = '1.0'
  def springVersion = "4.1.6.RELEASE"
}

subprojects {

  repositories {
    mavenCentral()
    jcenter()
  }

  ext {
     springVersion = '4.1.6.RELEASE'
     serenityVersion = '1.1.+'
  }

  dependencies {
    compile "org.springframework:spring-context:$springVersion"
    compile "org.apache.commons:commons-lang3:3.+"
    compile "org.apache.commons:commons-collections4:4.+"
    compile "org.slf4j:slf4j-api:1.+"
    compile "org.slf4j:jcl-over-slf4j:1.+"
    compile "org.slf4j:log4j-over-slf4j:1.+"
    compile "org.slf4j:jul-to-slf4j:1.+"
    compile "ch.qos.logback:logback-classic:1.+"
    
    testCompile "junit:junit:4.+"
    testCompile "org.springframework:spring-test:$springVersion"
    testCompile "org.mockito:mockito-core:1.9+"
    testCompile 'org.assertj:assertj-core:3.+'
    
  }

  eclipse {
    classpath {
      //default settings for downloading sources and Javadoc:
      downloadSources = true
      downloadJavadoc = true
      file {
        // Classpath entry for Eclipse which changes the order of classpathentries; otherwise no sources for 3rd party jars are shown
        withXml { xml ->
          def node = xml.asNode()
          def webContainerNode = node.find { it.@path == 'org.eclipse.jst.j2ee.internal.web.container' }
          println "WAR Node: " + webContainerNode
          if ( webContainerNode != null) {
            node.remove( webContainerNode )
          }
          def earContainerNode = node.find { it.@path == 'org.eclipse.jst.j2ee.internal.module.container' }
          println "EAR Node: " + earContainerNode
          if ( earContainerNode != null) {
            node.remove( earContainerNode )
          }
          plugins.withType(WarPlugin) {          
            println "Node: adding WarPlugin"
            node.appendNode( 'classpathentry', [ kind: 'con', path: 'org.eclipse.jst.j2ee.internal.web.container', exported: 'true'])
          }
          plugins.withType(EarPlugin) {          
            println "Node: adding earPlugin"
            def exitingContainerNode = node.find { it.@path == 'org.eclipse.jdt.launching.JRE_CONTAINER' }
            println "JAR Node: " + exitingContainerNode
            if ( exitingContainerNode != null) {
              //node.remove( exitingContainerNode )
            }
            node.appendNode( 'classpathentry', [ kind: 'con', path: 'org.eclipse.jst.j2ee.internal.module.container', exported: 'true'])
          }
        }
      }
    }
    
  }

  test {
    reports.html.enabled = true
  } 
  
}

/*
      file {
        // Classpath entry for Eclipse which changes the order of classpathentries; otherwise no sources for 3rd party jars are shown
        withXml { xml ->
          def node = xml.asNode()
          def webContainerNode = node.find { it.@path == 'org.eclipse.jst.j2ee.internal.web.container' }
          println "Node: " + webContainerNode
          if ( webContainerNode != null) {
            node.remove( webContainerNode )
          }
          plugins.withType(WarPlugin) {          
            println "Node: adding WarPlugin"
            node.appendNode( 'classpathentry', [ kind: 'con', path: 'org.eclipse.jst.j2ee.internal.web.container', exported: 'true'])
          }
          plugins.withType(EarPlugin) {          
            println "Node: adding earPlugin"
            node.appendNode( 'classpathentry', [ kind: 'con', path: 'org.eclipse.jst.j2ee.internal.module.container', exported: 'true'])
          }
        }
      }
*/

