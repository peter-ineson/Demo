

peter@linux-09qt:~/Dev/demo/Demo/Demo> gradle DemoApp:npmInstall --info
...
Compiling build file '/home/peter/Dev/demo/Demo/DemoApp/build.gradle' using StatementExtractingScriptTransformer.
Resource missing. [HTTP GET: https://repo1.maven.org/maven2/com/moowork/gradle/gradle-node-plugin/0.10/gradle-node-plugin-0.10.pom]
Resource missing. [HTTP HEAD: https://repo1.maven.org/maven2/com/moowork/gradle/gradle-node-plugin/0.10/gradle-node-plugin-0.10.jar]
Resource missing. [HTTP GET: http://repository.codehaus.org/com/moowork/gradle/gradle-node-plugin/0.10/gradle-node-plugin-0.10.pom]
Resource missing. [HTTP HEAD: http://repository.codehaus.org/com/moowork/gradle/gradle-node-plugin/0.10/gradle-node-plugin-0.10.jar]
Download http://plugins.gradle.org/m2/com/moowork/gradle/gradle-node-plugin/0.10/gradle-node-plugin-0.10.pom
Download http://plugins.gradle.org/m2/com/moowork/gradle/gradle-node-plugin/0.10/gradle-node-plugin-0.10.jar
Compiling build file '/home/peter/Dev/demo/Demo/DemoApp/build.gradle' using BuildScriptTransformer.
Evaluating project ':DemoServices' using build file '/home/peter/Dev/demo/Demo/DemoServices/build.gradle'.
Evaluating project ':DemoServicesApi' using build file '/home/peter/Dev/demo/Demo/DemoServicesApi/build.gradle'.
Evaluating project ':TestingFramework' using build file '/home/peter/Dev/demo/Demo/TestingFramework/build.gradle'.
All projects evaluated.
Selected primary task 'DemoApp:npmInstall' from project :DemoApp
Resource missing. [HTTP GET: https://repo1.maven.org/maven2/org/nodejs/node/0.11.10/node-0.11.10.pom]
Resource missing. [HTTP HEAD: https://repo1.maven.org/maven2/org/nodejs/node/0.11.10/node-0.11.10-linux-x86.tar.gz]
Resource missing. [HTTP GET: https://jcenter.bintray.com/org/nodejs/node/0.11.10/node-0.11.10.pom]
Resource missing. [HTTP HEAD: https://jcenter.bintray.com/org/nodejs/node/0.11.10/node-0.11.10-linux-x86.tar.gz]
Resource missing. [HTTP GET: http://nodejs.org/dist/v0.11.10/ivy.xml]
Download http://nodejs.org/dist/v0.11.10/node-v0.11.10-linux-x86.tar.gz
Tasks to be executed: [task ':DemoApp:nodeSetup', task ':DemoApp:npmSetup', task ':DemoApp:npmInstall']
:DemoApp:nodeSetup (Thread[Daemon worker Thread 3,5,main]) started.
:DemoApp:nodeSetup
Invalidating in-memory cache of /home/peter/Dev/demo/Demo/Demo/.gradle/2.3/taskArtifacts/taskArtifacts.bin
Invalidating in-memory cache of /home/peter/Dev/demo/Demo/Demo/.gradle/2.3/taskArtifacts/fileSnapshots.bin
Invalidating in-memory cache of /home/peter/Dev/demo/Demo/Demo/.gradle/2.3/taskArtifacts/fileHashes.bin
Invalidating in-memory cache of /home/peter/Dev/demo/Demo/Demo/.gradle/2.3/taskArtifacts/outputFileStates.bin
Executing task ':DemoApp:nodeSetup' (up-to-date check took 0.25 secs) due to:
  No history is available.
:DemoApp:nodeSetup (Thread[Daemon worker Thread 3,5,main]) completed. Took 4.357 secs.
:DemoApp:npmSetup (Thread[Daemon worker Thread 3,5,main]) started.
:DemoApp:npmSetup
Skipping task ':DemoApp:npmSetup' as task onlyIf is false.
:DemoApp:npmSetup SKIPPED
:DemoApp:npmSetup (Thread[Daemon worker Thread 3,5,main]) completed. Took 0.004 secs.
:DemoApp:npmInstall (Thread[Daemon worker Thread 3,5,main]) started.
:DemoApp:npmInstall
Executing task ':DemoApp:npmInstall' (up-to-date check took 0.003 secs) due to:
  No history is available.
Starting process 'command '/home/peter/.gradle/nodejs/node-v0.11.10-linux-x86/bin/node''. Working directory: /home/peter/Dev/demo/Demo/DemoApp/build/DemoApp_nodeJs Command: /home/peter/.gradle/nodejs/node-v0.11.10-linux-x86/bin/node /home/peter/.gradle/nodejs/node-v0.11.10-linux-x86/lib/node_modules/npm/bin/npm-cli.js install
:DemoApp:npmInstall FAILED
:DemoApp:npmInstall (Thread[Daemon worker Thread 3,5,main]) completed. Took 0.252 secs.

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':DemoApp:npmInstall'.
> A problem occurred starting process 'command '/home/peter/.gradle/nodejs/node-v0.11.10-linux-x86/bin/node''

* Try:
Run with --stacktrace option to get the stack trace. Run with --debug option to get more log output.

BUILD FAILED

Total time: 1 mins 55.651 secs
Stopped 0 compiler daemon(s).
Received result DaemonCommandResult[type=CommandFailure, value=org.gradle.launcher.exec.ReportedException: org.gradle.internal.exceptions.LocationAwareException: Execution failed for task ':DemoApp:npmInstall'.] from daemon DaemonInfo{pid=7115, address=[5409f25a-209a-436e-afe2-ad684252cbb2 port:37286, addresses:[/0:0:0:0:0:0:0:1%lo, /127.0.0.1]], idle=true, context=DefaultDaemonContext[uid=ab00ab8c-c0cc-43c5-b508-be9f869ec387,javaHome=/usr/java/jdk1.8.0_40,daemonRegistryDir=/home/peter/.gradle/daemon,pid=7115,idleTimeout=10800000,daemonOpts=-XX:MaxPermSize=256m,-XX:+HeapDumpOnOutOfMemoryError,-Xmx1024m,-Dfile.encoding=UTF-8,-Duser.country=GB,-Duser.language=en,-Duser.variant]}.
peter@linux-09qt:~/Dev/demo/Demo/Demo> 


> mkdir /home/peter/Dev/demo/Demo/DemoApp/build/DemoApp_nodeJs

> cp /home/peter/Dev/demo/Demo/DemoApp/package.json /home/peter/Dev/demo/Demo/DemoApp/build/DemoApp_nodeJs

> ls /home/peter/.gradle/nodejs/node-v0.11.10-linux-x86/lib/node_modules/mocha-test-runner/node_modules/mocha/

> export PATH=$PATH:/home/peter/Dev/demo/Demo/DemoApp/build/DemoApp_nodejsWork/node-v0.11.10-linux-x86/bin

peter@linux-09qt:~/Dev/demo/Demo/Demo> ./../DemoApp/node_modules/.bin/mocha  ../DemoApp/src/intTest/javascript/myTest.js
myTest ----------------- Hello World ----------------------
testCase =  function (title, fn){
      var suite = Suite.create(suites[0], title);
      suite.file = file;
      suites.unshift(suite);
      fn.call(suite);
      suites.shift();
      return suite;
    }


  Array
    #indexOf()
      âœ“ should return -1 when not present


  1 passing (57ms)




> XUNIT_FILE=xunit.xml ./../DemoApp/node_modules/.bin/mocha  ../DemoApp/src/intTest/javascript/myTest.js --reporter xunit-file 


> LOG_XUNIT=true ./../DemoApp/node_modules/.bin/mocha  ../DemoApp/src/intTest/javascript/myTest.js --reporter xunit-file





buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://repository.codehaus.org"}
    }
    dependencies {
        classpath(
            [ "org.codehaus.groovy.modules.http-builder:http-builder:0.7.+"],
            [ "net.serenity-bdd:serenity-gradle-plugin:1.0.+" ],
            [ "me.ineson.gradle:mochaJsPlugin:0.+" ]
        ) 
        
    }
}


plugins {
  id "com.eriwen.gradle.js" version "1.12.1"  // For jsHint
  id "com.moowork.node" version "0.10"        // For nodeJs
}


task greeting(type: me.ineson.gradle.MochaJsTask) {
    greeting = 'howdy!'
}

task greetingsrc(type: me.ineson.gradle.MochaJsTask);

evaluationDependsOn(':DemoServices')

apply plugin: 'war'
apply plugin: 'eclipse-wtp'
apply plugin: 'net.serenity-bdd.aggregator'

// For JS Hint
javascript.source {
    dev {
        js {
            srcDir "${projectDir}/src/main/webapp/js"
            include "*.js"
            exclude "*.min.js"
        }
    }
    prod {
        js {
            srcDir "${projectDir}/src/main/webapp/js"
            include "*.js"
        }
    }
}

jshint {
/*
    source = javascript.source.dev.js.files
    dest = file("${buildDir}/jshint.out")
    reporter = 'checkstyle'
    */
    tasks.jshint.source = javascript.source.dev.js.files
    tasks.jshint.dest = file("${buildDir}/jshint.out")
    tasks.jshint.reporter = 'checkstyle'
    tasks.jshint.ignoreExitCode=true    
    options = [expr: "true", unused: "true"]
}

configurations {  
    javaAgentSpringInstrument
    
    testCompile.exclude group: "ch.qos.logback", module: "logback-classic"
    
    intTestCompile.extendsFrom testCompile
    intTestRuntime.extendsFrom testRuntime
    accTestCompile.extendsFrom testCompile
    accTestRuntime.extendsFrom testRuntime
  
}


dependencies {
  providedCompile "javax.servlet:javax.servlet-api:3.1.0"
  providedCompile "org.projectlombok:lombok:1.16.+"
    //compile "org.springframework:spring-context:" + springVersion

  compile(
    [ "commons-io:commons-io:2.+" ],
    [ "commons-configuration:commons-configuration:1.+" ],
    [ "commons-collections:commons-collections:3.2.+" ],
    [ "org.springframework:spring-webmvc:$springVersion" ],
    
    [ "org.webjars:bootstrap:3.1+" ],
    [ "org.webjars:jquery:2.1.1" ],
    [ "org.webjars:jquery-ui:1.11.1" ],
    [ "org.webjars:jquery-ui-themes:1.11.0" ],
    [ "org.webjars:jquery-blockui:2.65" ],

    [ project(":DemoServicesApi") ]
  )
  compile( "org.glassfish.web:javax.servlet.jsp.jstl:1.2+") {
    exclude module: 'servlet-api'
    exclude module: 'jsp-api'
  }
  compile( "com.sun.xml.ws:jaxws-rt:2.2.1") {
    exclude module: 'junit'
  }

  testCompile(
    [ project(":TestingFramework") ],
    [ project(":DemoServices") ]
  )
  testRuntime(
    [ "mysql:mysql-connector-java:5.1.31" ],
    [ "org.mongodb:mongo-java-driver:2.+" ],
    [ "org.springframework:spring-instrument:4.0.5.RELEASE" ]
  )
  javaAgentSpringInstrument "org.springframework:spring-instrument:4.0.5.RELEASE"


  // TODO: "accTestCompile(" - note currently the eclipse plugin does not pick up the acceptance test classpath
  testCompile(
    [ "net.serenity-bdd:core:1.0.+" ],
    [ "net.serenity-bdd:serenity-spring:1.0.+" ],
    [ "net.serenity-bdd:serenity-junit:1.0.+" ],
    [ "net.serenity-bdd:serenity-cucumber:1.0.+" ],
    [ "net.serenity-bdd:serenity-jbehave:1.0.+" ],
    [ "org.slf4j:slf4j-simple:1.+" ]
  )
  
}

gradle.startParameter.continueOnFailure = true

// For jsHint
sourceSets {
    intTest {
        java.srcDir file('src/intTest/java')
        resources.srcDir file('src/intTest/resources')
        compileClasspath += sourceSets.main.output + sourceSets.test.output
//        compileClasspath = sourceSets.main.output + configurations.intTest
//        runtimeClasspath = output + compileClasspath
    }
    accTest {
        java.srcDir file('src/accTest/java')
        resources.srcDir file('src/accTest/resources') 
        resources.srcDir file('src/accTest/stories') 
        resources.srcDir file('src/accTest/features') 
        compileClasspath += sourceSets.main.output + sourceSets.test.output
    }
}


eclipse {
  classpath {
 
    //default settings for downloading sources and Javadoc:
    /*
    downloadSources = true
    downloadJavadoc = true
    file {
      / Classpath entry for Eclipse which changes the order of classpathentries; otherwise no sources for 3rd party jars are shown
      withXml { xml ->
        def node = xml.asNode()
        node.remove( node.find { it.@path == 'org.eclipse.jst.j2ee.internal.web.container' } )
        node.appendNode( 'classpathentry', [ kind: 'con', path: 'org.eclipse.jst.j2ee.internal.web.container', exported: 'true'])
      }
    }
    */
  }
  wtp {
    facet {
      facet name: 'java', version: '1.8'
      facet name: 'jst.web', version: '3.1'
    }
  }  
}


task deployWar(dependsOn: war) << {
  ant.unwar(src: war.archivePath, dest: System.properties['tomcat.home']+'/webapps/'+project.archivesBaseName) 
}

tasks.withType(Test) {
    reports.junitXml.destination = file("${buildDir}/${name}-results")
    reports.html.destination = file("${reporting.baseDir}/${name}")
} 


task intTest(type: Test) {
    testClassesDir = sourceSets.intTest.output.classesDir
    classpath += sourceSets.intTest.runtimeClasspath
    systemProperty "DemoApp.intTest.serviceRestUrl", System.properties['DemoApp.intTest.serviceRestUrl']  
}

task intTestReport(dependsOn: jar, type: TestReport) {
  destinationDir = file("$buildDir/reports/intTests")
  // Include the results from the `test` task in all subprojects
  //reportOn subprojects*.test
}


task accTest(type: Test) {

//    systemProperty "browser", "chrome"
    systemProperty "serenity.use.unique.browser", "false"
    systemProperty "thucydides.use.unique.browser", "false"
//    systemProperty "webdriver.chrome.driver", "C:\\Users\\peter\\Downloads\\chromedriver_win32\\chromedriver.exe"
//    systemProperty "browser", "ie"
//    systemProperty "webdriver.ie.driver", "C:\\Users\\peter\\Downloads\\IEDriverServer_x64_2.43.0\\IEDriverServer.exe"


/*
    def singleTest = System.properties[name+'.single']
    if (testTags == null && singleTest != null) {
        testTags = singleTest;
    }
    if (testMetafilter == null && singleTest != null) {
        testMetafilter = "+" + singleTest;
    } 
*/
    def testTags = System.properties[name+'.tags']
    def testMetafilter = System.properties[name+'.metafilter']
    if (testTags) {
        systemProperty "tags", testTags  
    }
    if (testMetafilter) {
        systemProperty "metafilter", testMetafilter  
    } 

    ignoreFailures = true
    doFirst {
        String argsString1 = "-javaagent:${configurations.javaAgentSpringInstrument.asPath}"  
        println(argsString1)
      
        // set JVM arguments for the test JVM(s)
        jvmArgs "${argsString1}"

        // Need 'target' directory on *nix systems to get any output
        //file('target').mkdirs()
/*     
        def filter = System.getProperty('bdd.stories') 
        if (filter == null) {
          filter = '*'
        }
        def stories = sourceSets.test.resources.matching { 
          it.include filter
        }.asPath
        systemProperty('bdd.stories', stories)
        */
    }

    testClassesDir = sourceSets.accTest.output.classesDir
    classpath += sourceSets.accTest.runtimeClasspath
//    systemProperty "DemoApp.intTest.serviceRestUrl", System.properties['DemoApp.intTest.serviceRestUrl']  
}


import groovyx.net.http.HTTPBuilder
import static groovyx.net.http.Method.GET
import static groovyx.net.http.ContentType.TEXT


enum ServerStatus {
    Running, NotRunning, NotDeployed
}


task callTc << {
  logger.quiet "Connecting to Tomcat"

  def authSite = new HTTPBuilder( 'http://localhost:8080' )
  authSite.auth.basic 'admin', 'admin'

  def deployStartCountdown = 10 
  def deployEndCountdown = 60 
  def deploymentIfTestStr = "/" + project.name + ":"
 
  while (true) {
    def status = null

    def listApps = authSite.request( GET, TEXT ) { req ->
      uri.path = '/manager/text/list'
      
      response.success = { resp, reader ->
        println "response status: ${resp.statusLine}"
        
        status = ServerStatus.NotDeployed
        reader.each {
  //        println "Line: -----" + it
  
          if (it.startsWith(deploymentIfTestStr)) {
            println "*****************************" + it
            if (it.startsWith(deploymentIfTestStr + "running:")) {
              status = ServerStatus.Running
            } else {
              status = ServerStatus.NotRunning
            }        
            return true
          }

        }
        System.out << reader
      }
      
      response.failure = { resp ->
        throw new GradleException("Error getting deployment status from Tomcat, error message: " + resp.statusLine)
      }
      
    }

    println "deployStartCountdown " + deployStartCountdown + ", deployEndCountdown " + deployEndCountdown

    if( status == null) {
      println "Error: failed to get status."
      break
    }
    if (deployStartCountdown > 0) {
      if (status == ServerStatus.NotRunning) {
        deployStartCountdown = -1
      } else {
        deployStartCountdown--;
      }
    } else if (deployStartCountdown == 0) {
      println "Error: Deploying does not appear to have started."
      break
    } else if (deployEndCountdown > 0) {
      if (status == ServerStatus.Running) {
        println "Deployment complete."
        break
      }
      deployEndCountdown--
    } else {
      println "Error: Deploying does not appear to have completed."
      break
    }

    Thread.sleep 1000
  } 
}

callTc.dependsOn deployWar
intTest.dependsOn callTc

accTest.dependsOn callTc


node {
  // Version of node to use.
  //version = '0.11.10'

  // Version of npm to use.
  //npmVersion = '2.1.5'

  // Base URL for fetching node distributions (change if you have a mirror).
  //distBaseUrl = 'http://nodejs.org/dist'

  // If true, it will download node using above parameters.
  // If false, it will try to use globally installed node.
  download = true

  // Set the work directory for unpacking node
  //workDir = file("${project.buildDir}/nodeJsTest")

  // Set the work directory where node_modules should be located
  nodeModulesDir = file("${project.buildDir}/nodeJsTest")
}


task myScript(type: NodeTask) {
  // Need to add node execs to the classpath.
  // $ ./../DemoApp/node_modules/.bin/mocha  ../DemoApp/src/intTest/javascript/myTest.js

  script = file('src/intTest/javascript/myTest.js')
}


ext {
  jsTestDependencies = ['mocha', 'xunit-file']
  jsTestModulesDir = file("${project.buildDir}/nodeJsTest")
  jsTestMochaExec = file('node_modules/.bin/mocha')
}



task setupJsTest(type: NpmTask) {
  outputs.dir file('node_modules')
  args = ['install'] + jsTestDependencies + ['--loglevel', 'error']
}

task runJsTest(type: NodeTask, dependsOn: 'setupJsTest') {
    script = jsTestMochaExec
    args = ['DemoApp/src/intTest/javascript/myTest.js', '--reporter', 'xunit-file']
    environment = [ 'LOG_XUNIT':'true' ]
    // args = ['DemoApp/src/intTest/javascript/myTest.js', '--reporter', 'xunit-file']
    //args = ['start', karmaConfig]
}


task listDepend << {
    configurations.compile.dependencies.each { file ->
        println file.group + ":" + file.name
    }

    println "1 -------------------------------"
    
    configurations.compile.files { dep -> dep.group == 'org.webjars' && dep.name != 'bootstrap' }.each { file ->
        println file.name + " -> " + file.path
    }

    println "2 -------------------------------"

    configurations.compile.files { dep -> dep.group == 'org.webjars' && dep.name != 'bootstrap' }.each { file ->
        println "Extract from " + file.path
    
        project.copy {
            from {
                  zipTree(file)
            }
            into file("$buildDir/webJars")
        }
        
        logger.warn "extracted"
    }

}



task listDepend2(type: Copy) {
    configurations.compile.files { dep -> dep.group == 'org.webjars' && dep.name != 'bootstrap' }.each { file ->
        
        println file.name + " -> " + file.path
        from zipTree(file)
/*
        eachFile { FileCopyDetails fcp ->
            println 'Check -> ' + fcp.relativePath.pathString
            if (fcp.relativePath.pathString.startsWith( 'META-INF/resources/webjars')) {
                // remap the file to the root
                def segments = fcp.relativePath.segments
                def pathsegments = segments[2..-1] as String[]
                println 'Add ' + pathsegments
                fcp.relativePath = new RelativePath(!fcp.file.isDirectory(), pathsegments)
            } else if ( ! fcp.relativePath.pathString.startsWith( 'webjars')) {
                println 'Exclude'
                fcp.exclude()
            }
        }
*/
    }
    into buildDir
    eachFile { FileCopyDetails fcp ->
        println 'Check -> ' + fcp.relativePath.pathString
        if (fcp.relativePath.pathString.startsWith( 'META-INF/resources/webjars')) {
            // remap the file to the root
            def segments = fcp.relativePath.segments
            def pathsegments = segments[2..-1] as String[]
            println 'Add ' + pathsegments
            fcp.relativePath = new RelativePath(!fcp.file.isDirectory(), pathsegments)
        } else if ( ! fcp.relativePath.pathString.startsWith( 'webjars')) {
            println 'Exclude'
            fcp.exclude()
        }
    }
/*    
*/
}





