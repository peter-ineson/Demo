
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://repository.codehaus.org"}
    }
    dependencies {
        classpath(
            [ "org.codehaus.groovy.modules.http-builder:http-builder:0.7.+"],
            [ "net.serenity-bdd:serenity-gradle-plugin:$serenityVersion" ],
            [ "me.ineson.gradle:mochaJsPlugin:0.+" ]
        ) 
        
    }
}


plugins {
  id "com.eriwen.gradle.js" version "1.12.1"  // For jsHint
  id "com.moowork.node" version "0.10"        // For nodeJs
}


evaluationDependsOn(':DemoServices')

apply plugin: 'war'
apply plugin: 'eclipse-wtp'
apply plugin: 'net.serenity-bdd.aggregator'

// For JS Hint
javascript.source {
    dev {
        js {
            srcDir "${projectDir}/src/main/webapp/js"
            include "*.js"
            exclude "*.min.js"
        }
    }
    prod {
        js {
            srcDir "${projectDir}/src/main/webapp/js"
            include "*.js"
        }
    }
}

jshint {
/*
    source = javascript.source.dev.js.files
    dest = file("${buildDir}/jshint.out")
    reporter = 'checkstyle'
    */
    tasks.jshint.source = javascript.source.dev.js.files
    tasks.jshint.dest = file("${buildDir}/jshint.out")
    tasks.jshint.reporter = 'checkstyle'
    tasks.jshint.ignoreExitCode=true    
    options = [expr: "true", unused: "true"]
}

configurations {  
    javaAgentSpringInstrument
    
    testCompile.exclude group: "ch.qos.logback", module: "logback-classic"
    
    intTestCompile.extendsFrom testCompile
    intTestRuntime.extendsFrom testRuntime
    accTestCompile.extendsFrom testCompile
    accTestRuntime.extendsFrom testRuntime
  
    antClasspath
}


dependencies {
   antClasspath 'org.apache.ant:ant-junit:1.9.5'


  providedCompile "javax.servlet:javax.servlet-api:3.1.0"
  providedCompile "org.projectlombok:lombok:1.16.+"
    //compile "org.springframework:spring-context:" + springVersion

  compile(
    [ "commons-io:commons-io:2.+" ],
    [ "commons-configuration:commons-configuration:1.+" ],
    [ "commons-collections:commons-collections:3.2.+" ],
    [ "org.springframework:spring-webmvc:$springVersion" ],
    
    [ "org.webjars:bootstrap:3.1+" ],
    [ "org.webjars:jquery:2.1.1" ],
    [ "org.webjars:jquery-ui:1.11.1" ],
    [ "org.webjars:jquery-ui-themes:1.11.0" ],
    [ "org.webjars:jquery-blockui:2.65" ],
    [ "org.webjars:EventEmitter:4.2.7-1" ],
    [ "org.webjars:sockjs-client:1.0.0" ],

    [ project(":DemoServicesApi") ]
  )
  compile( "org.glassfish.web:javax.servlet.jsp.jstl:1.2+") {
    exclude module: 'servlet-api'
    exclude module: 'jsp-api'
  }
  compile( "com.sun.xml.ws:jaxws-rt:2.2.1") {
    exclude module: 'junit'
  }

  testCompile(
    [ project(":TestingFramework") ],
    [ project(":DemoServices") ]
  )
  testRuntime(
    [ "mysql:mysql-connector-java:5.1.31" ],
    [ "org.mongodb:mongo-java-driver:2.+" ],
    [ "org.springframework:spring-instrument:4.0.5.RELEASE" ]
  )
  javaAgentSpringInstrument "org.springframework:spring-instrument:4.0.5.RELEASE"


  // TODO: "accTestCompile(" - note currently the eclipse plugin does not pick up the acceptance test classpath
  testCompile(
//    [ "net.serenity-bdd:core:1.0.+" ],
    [ "net.serenity-bdd:serenity-core:$serenityVersion" ],
    [ "net.serenity-bdd:serenity-spring:$serenityVersion" ],
    [ "net.serenity-bdd:serenity-junit:$serenityVersion" ],
    [ "net.serenity-bdd:serenity-cucumber:1.0.+" ],
    [ "net.serenity-bdd:serenity-jbehave:1.0.+" ],
    [ "org.slf4j:slf4j-simple:1.+" ]
  )
  
}

gradle.startParameter.continueOnFailure = true

// For jsHint
sourceSets {
    intTest {
        java.srcDir file('src/intTest/java')
        resources.srcDir file('src/intTest/resources')
        compileClasspath += sourceSets.main.output + sourceSets.test.output
//        compileClasspath = sourceSets.main.output + configurations.intTest
//        runtimeClasspath = output + compileClasspath
    }
    accTest {
        java.srcDir file('src/accTest/java')
        resources.srcDir file('src/accTest/resources') 
        resources.srcDir file('src/accTest/stories') 
        resources.srcDir file('src/accTest/features') 
        compileClasspath += sourceSets.main.output + sourceSets.test.output
    }
}


eclipse {
  classpath {
 
    //default settings for downloading sources and Javadoc:
    /*
    downloadSources = true
    downloadJavadoc = true
    file {
      / Classpath entry for Eclipse which changes the order of classpathentries; otherwise no sources for 3rd party jars are shown
      withXml { xml ->
        def node = xml.asNode()
        node.remove( node.find { it.@path == 'org.eclipse.jst.j2ee.internal.web.container' } )
        node.appendNode( 'classpathentry', [ kind: 'con', path: 'org.eclipse.jst.j2ee.internal.web.container', exported: 'true'])
      }
    }
    */
  }
  wtp {
    facet {
      facet name: 'java', version: '1.8'
      facet name: 'jst.web', version: '3.1'
    }
  }  
}


task deployWar(dependsOn: war) << {
  ant.unwar(src: war.archivePath, dest: System.properties['tomcat.home']+'/webapps/'+project.archivesBaseName) 
}

tasks.withType(Test) {
    reports.junitXml.destination = file("${buildDir}/${name}-results")
    reports.html.destination = file("${reporting.baseDir}/${name}")
} 


task intTest(type: Test) {
    testClassesDir = sourceSets.intTest.output.classesDir
    classpath += sourceSets.intTest.runtimeClasspath
    systemProperty "DemoApp.intTest.serviceRestUrl", System.properties['DemoApp.intTest.serviceRestUrl']  
}

task intTestReport(dependsOn: jar, type: TestReport) {
  destinationDir = file("$buildDir/reports/intTests")
  // Include the results from the `test` task in all subprojects
  //reportOn subprojects*.test
}


task accTest(type: Test) {

//    systemProperty "browser", "chrome"
    systemProperty "serenity.use.unique.browser", "false"
    systemProperty "thucydides.use.unique.browser", "false"
//    systemProperty "webdriver.chrome.driver", "C:\\Users\\peter\\Downloads\\chromedriver_win32\\chromedriver.exe"
//    systemProperty "browser", "ie"
//    systemProperty "webdriver.ie.driver", "C:\\Users\\peter\\Downloads\\IEDriverServer_x64_2.43.0\\IEDriverServer.exe"


/*
    def singleTest = System.properties[name+'.single']
    if (testTags == null && singleTest != null) {
        testTags = singleTest;
    }
    if (testMetafilter == null && singleTest != null) {
        testMetafilter = "+" + singleTest;
    } 
*/
    def testTags = System.properties[name+'.tags']
    def testMetafilter = System.properties[name+'.metafilter']
    if (testTags) {
        systemProperty "tags", testTags  
    }
    if (testMetafilter) {
        systemProperty "metafilter", testMetafilter  
    } 

    ignoreFailures = true
    doFirst {
        String argsString1 = "-javaagent:${configurations.javaAgentSpringInstrument.asPath}"  
        println(argsString1)
      
        // set JVM arguments for the test JVM(s)
        jvmArgs "${argsString1}"

        // Need 'target' directory on *nix systems to get any output
        //file('target').mkdirs()
/*     
        def filter = System.getProperty('bdd.stories') 
        if (filter == null) {
          filter = '*'
        }
        def stories = sourceSets.test.resources.matching { 
          it.include filter
        }.asPath
        systemProperty('bdd.stories', stories)
        */
    }

    testClassesDir = sourceSets.accTest.output.classesDir
    classpath += sourceSets.accTest.runtimeClasspath
//    systemProperty "DemoApp.intTest.serviceRestUrl", System.properties['DemoApp.intTest.serviceRestUrl']  
}


import groovyx.net.http.HTTPBuilder
import static groovyx.net.http.Method.GET
import static groovyx.net.http.ContentType.TEXT


enum ServerStatus {
    Running, NotRunning, NotDeployed
}


task callTc << {
  logger.quiet "Connecting to Tomcat"

  def authSite = new HTTPBuilder( 'http://localhost:8080' )
  authSite.auth.basic 'admin', 'admin'

  def deployStartCountdown = 10 
  def deployEndCountdown = 60 
  def deploymentIfTestStr = "/" + project.name + ":"
 
  while (true) {
    def status = null

    def listApps = authSite.request( GET, TEXT ) { req ->
      uri.path = '/manager/text/list'
      
      response.success = { resp, reader ->
        println "response status: ${resp.statusLine}"
        
        status = ServerStatus.NotDeployed
        reader.each {
  //        println "Line: -----" + it
  
          if (it.startsWith(deploymentIfTestStr)) {
            println "*****************************" + it
            if (it.startsWith(deploymentIfTestStr + "running:")) {
              status = ServerStatus.Running
            } else {
              status = ServerStatus.NotRunning
            }        
            return true
          }

        }
        System.out << reader
      }
      
      response.failure = { resp ->
        throw new GradleException("Error getting deployment status from Tomcat, error message: " + resp.statusLine)
      }
      
    }

    println "deployStartCountdown " + deployStartCountdown + ", deployEndCountdown " + deployEndCountdown

    if( status == null) {
      println "Error: failed to get status."
      break
    }
    if (deployStartCountdown > 0) {
      if (status == ServerStatus.NotRunning) {
        deployStartCountdown = -1
      } else {
        deployStartCountdown--;
      }
    } else if (deployStartCountdown == 0) {
      println "Error: Deploying does not appear to have started."
      break
    } else if (deployEndCountdown > 0) {
      if (status == ServerStatus.Running) {
        println "Deployment complete."
        break
      }
      deployEndCountdown--
    } else {
      println "Error: Deploying does not appear to have completed."
      break
    }

    Thread.sleep 1000
  } 
}

callTc.dependsOn deployWar
intTest.dependsOn callTc

accTest.dependsOn callTc


node {
  // Version of node to use.
  //version = '0.11.10'

  // Version of npm to use.
  //npmVersion = '2.1.5'

  // Base URL for fetching node distributions (change if you have a mirror).
  //distBaseUrl = 'http://nodejs.org/dist'

  // If true, it will download node using above parameters.
  // If false, it will try to use globally installed node.
  download = true

  // Set the work directory for unpacking node
  workDir = file("${project.buildDir}/nodeJs")

  // Set the work directory where node_modules should be located
  nodeModulesDir = file("${project.buildDir}/nodeJsTest/test/node_modules")
}


task myScript(type: NodeTask) {
  // Need to add node execs to the classpath.
  // $ ./../DemoApp/node_modules/.bin/mocha  ../DemoApp/src/intTest/javascript/myTest.js

  script = file('src/intTest/javascript/myTest.js')
}


ext {
  cacheWebJars = file("${project.buildDir}/cache/webJars")

  jsSrcDir = file("${projectDir}/src/main/webapp/js")
  // Test dirs
  jsTestModulesDir = file("${project.buildDir}/jsTest")
  jsTestMochaExec = file("${ext.jsTestModulesDir}/node_modules/.bin/mocha")
  jsTestSrcDir = file("${projectDir}/src/test/javascript")
  // intTest dirs
  jsIntTestModulesDir = file("${project.buildDir}/jsIntTest")
  jsIntTestMochaExec = file("${ext.jsIntTestModulesDir}/node_modules/.bin/mocha")
  jsIntTestSrcDir = file("${projectDir}/src/intTest/javascript")
}


task initJsTests() << {
    if( !jsTestModulesDir.exists() ) {
        jsTestModulesDir.mkdirs();
    }
    if( !jsIntTestModulesDir.exists() ) {
        jsIntTestModulesDir.mkdirs();
    }
}

/*
npm_install.dependsOn(initJsTest) {
  workingDir node.nodeModulesDir
}
*/

task initJsTestPackage(type: Copy, dependsOn: 'initJsTests') {
    from(jsTestSrcDir) {
        include 'package.json'
    }
    into jsTestModulesDir
}


task initJsIntTestPackage(type: Copy, dependsOn: 'initJsTests') {
    from(jsIntTestSrcDir) {
        include 'package.json'
    }
    into jsIntTestModulesDir
}

task setupJsTest(type: NpmTask, dependsOn: ['initJsTestPackage']) {
  //outputs.dir node.nodeModulesDir
  workingDir jsTestModulesDir
  args = ['install' ,'--loglevel', 'error']
}

task setupJsIntTest(type: NpmTask, dependsOn: ['initJsIntTestPackage']) {
  //outputs.dir node.nodeModulesDir
  workingDir jsIntTestModulesDir
  args = ['install' ,'--loglevel', 'error']
}


task copyJsTestWebJars(type: Copy, dependsOn: ['extractWebJars','setupJsTest']) {
    from new File( cacheWebJars, '/webjars')
    into new File( jsTestModulesDir, 'webjars')
}

task copyJsTestMainSrc(type: Copy, dependsOn: ['setupJsTest']) {
    from 'src/main/webapp/js'
    into new File( jsTestModulesDir, 'src')
}

task copyJsTestMainTest(type: Copy, dependsOn: ['setupJsTest']) {
    from 'src/test/javascript'
    into new File( jsTestModulesDir, 'test')
}

task copyJsIntTestWebJars(type: Copy, dependsOn: ['extractWebJars','setupJsIntTest']) {
    from new File( cacheWebJars, '/webjars')
    into new File( jsIntTestModulesDir, 'webjars')
}

task copyJsIntTestMainSrc(type: Copy, dependsOn: ['setupJsTest']) {
    from 'src/main/webapp/js'
    into new File( jsIntTestModulesDir, 'src')
}

task copyJsIntTestMainTest(type: Copy, dependsOn: ['setupJsTest']) {
    from 'src/test/javascript'
    into new File( jsIntTestModulesDir, 'test')
}

task copyJsIntTestMainIntTest(type: Copy, dependsOn: ['setupJsTest']) {
    from 'src/intTest/javascript'
    into new File( jsIntTestModulesDir, 'intTest')
}


import me.ineson.gradle.mocha.task.MochaExec;

task runJsTest(dependsOn: ['setupJsTest','copyJsTestWebJars','copyJsTestMainSrc','copyJsTestMainTest']) << {
    def mocha = new MochaExec( project, 'test', jsTestModulesDir);
    mocha.runTest( "jsTest", "myTest");
}

task runJsIntTest(dependsOn: ['setupJsIntTest','copyJsIntTestWebJars','copyJsIntTestMainSrc','copyJsIntTestMainTest', 'copyJsIntTestMainIntTest']) << {
    def mocha = new MochaExec( project, 'intTest', jsIntTestModulesDir);
    mocha.runTest( "jsTest", "myIntTest");
}



task extractWebJars(type: Copy) {
    configurations.compile.files { dep -> dep.group == 'org.webjars' && dep.name != 'bootstrap' }.each { file ->
        
        //println file.name + " -> " + file.path
        from zipTree(file)
    }
    into cacheWebJars
    eachFile { FileCopyDetails fcp ->
//        println 'Check -> ' + fcp.relativePath.pathString
        if (fcp.relativePath.pathString.startsWith( 'META-INF/resources/webjars')) {
            // remap the file to the root
            def segments = fcp.relativePath.segments
            def pathsegments = segments[2..-1] as String[]
//            println 'Add ' + pathsegments
            fcp.relativePath = new RelativePath(!fcp.file.isDirectory(), pathsegments)
        } else if ( ! fcp.relativePath.pathString.startsWith( 'webjars')) {
//            println 'Exclude'
            fcp.exclude()
        }
    }
}

task aggregateTestReports( dependsOn: [ 'runJsTest', 'test']) << {
    aggregateReports( 
        new File( project.buildDir, '/test-results'),
        new File( project.buildDir, 'reports/allTests'));
}

test.finalizedBy aggregateTestReports
runJsTest.finalizedBy aggregateTestReports

task aggregateIntTestReports( dependsOn: [ 'runJsIntTest', 'intTest']) << {
    aggregateReports( 
        new File( project.buildDir, '/intTest-results'),
        new File( project.buildDir, 'reports/allIntTests'));
}

/*
intTest.finalizedBy aggregateIntTestReports
runJsIntTest.finalizedBy aggregateIntTestReports
*/

def aggregateReports( File resultsDir, File reportDir) {
    if( !reportDir.exists() ) {
        println("creating subdir " +reportDir)

        if(reportDir.mkdirs()) {
            println("succeeded in making folder")
        } else {
            println("failed to make folder")
        }
    }

    ant.taskdef(
        name: 'junitreport_js',
        classname: 'org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator',
        classpath: configurations.antClasspath.asPath
    )
    
    
    ant.junitreport_js(todir: resultsDir.absolutePath) {
        fileset(dir: resultsDir.absolutePath, includes: 'TEST-*.xml')
        report(todir: reportDir.absolutePath, format: "frames")
    }
}

