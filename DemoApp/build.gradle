evaluationDependsOn(':DemoServices')

buildscript {
    repositories {
        mavenCentral()
        maven { url "http://repository.codehaus.org"}
    }
    dependencies {
        classpath(
            [ "org.codehaus.groovy.modules.http-builder:http-builder:0.7.+"],
            [ "net.serenity-bdd:serenity-gradle-plugin:1.0.+" ]
        ) 
        
    }
}

apply plugin: 'war'
apply plugin: 'eclipse-wtp'
apply plugin: 'net.serenity-bdd.aggregator'

configurations {  
    javaAgentSpringInstrument
    intTestCompile.extendsFrom testCompile
    intTestRuntime.extendsFrom testRuntime
    accTestCompile.extendsFrom testCompile
    accTestRuntime.extendsFrom testRuntime
}


dependencies {
  providedCompile "javax.servlet:javax.servlet-api:3.1.0"
  providedCompile "org.projectlombok:lombok:1.16.+"
    //compile "org.springframework:spring-context:" + springVersion

  compile(
    [ "commons-io:commons-io:2.+" ],
    [ "commons-configuration:commons-configuration:1.+" ],
    [ "commons-collections:commons-collections:3.2.+" ],
    [ "org.springframework:spring-webmvc:$springVersion" ],
    
    
    [ "org.webjars:bootstrap:3.1+" ],
    [ "org.webjars:jquery:2.1.1" ],
    [ "org.webjars:jquery-ui:1.11.1" ],
    [ "org.webjars:jquery-ui-themes:1.11.0" ],
    [ project(":DemoServicesApi") ]
  )
  compile( "org.glassfish.web:javax.servlet.jsp.jstl:1.2+") {
    exclude module: 'servlet-api'
    exclude module: 'jsp-api'
  }
  compile( "com.sun.xml.ws:jaxws-rt:2.2.1") {
    exclude module: 'junit'
  }

  testCompile(
    [ project(":TestingFramework") ],
    [ "net.serenity-bdd:core:1.0.+" ],
    [ "net.serenity-bdd:serenity-junit:1.0.+" ],
    [ "net.serenity-bdd:serenity-cucumber:1.0.+" ],
    [ "net.serenity-bdd:serenity-jbehave:1.0.+" ],
    [ "org.assertj:assertj-core:1.7.+" ],
    [ "org.slf4j:slf4j-simple:1.+" ]
  )
  testRuntime(
    [ "mysql:mysql-connector-java:5.1.31" ],
    [ "org.mongodb:mongo-java-driver:2.+" ],
    [ "org.springframework:spring-instrument:4.0.5.RELEASE" ]
  )
  javaAgentSpringInstrument "org.springframework:spring-instrument:4.0.5.RELEASE"

  testCompile(
      [ "org.jbehave:jbehave-spring:3.9+" ],
//    [ "org.jbehave.web:jbehave-web:3.5.+" ]
//      [ "org.jbehave.web:jbehave-web-selenium:3.6+" ],
//      [ "org.jbehave.web:jbehave-web-selenium-java-spring-archetype:3.6+" ],
//      [ "org.jbehave.web:jbehave-web-selenium:3.+" ],
//      [ "org.jbehave.web:jbehave-web-selenium-java-spring-archetype:3.+" ],
      [ project(":DemoServices") ]
  )

  testCompile(
//    [ "org.jbehave:jbehave-core:4.+" ],
//    [ "org.jbehave.web:jbehave-web:3.5.+" ]
//    [ "org.jbehave.web:jbehave-web-selenium:3.6+" ],
//    [ "org.jbehave.web:jbehave-web-selenium-java-spring-archetype:3.6+" ]
  )
}

gradle.startParameter.continueOnFailure = true


sourceSets {
    intTest {
        java.srcDir file('src/intTest/java')
        resources.srcDir file('src/intTest/resources')
        compileClasspath += sourceSets.main.output + sourceSets.test.output
//        compileClasspath = sourceSets.main.output + configurations.intTest
//        runtimeClasspath = output + compileClasspath
    }
    accTest {
        java.srcDir file('src/accTest/java')
        resources.srcDir file('src/accTest/resources') 
        resources.srcDir file('src/accTest/stories') 
        compileClasspath += sourceSets.main.output + sourceSets.test.output
    }
}


eclipse {
  classpath {
 
    //default settings for downloading sources and Javadoc:
    /*
    downloadSources = true
    downloadJavadoc = true
    file {
      / Classpath entry for Eclipse which changes the order of classpathentries; otherwise no sources for 3rd party jars are shown
      withXml { xml ->
        def node = xml.asNode()
        node.remove( node.find { it.@path == 'org.eclipse.jst.j2ee.internal.web.container' } )
        node.appendNode( 'classpathentry', [ kind: 'con', path: 'org.eclipse.jst.j2ee.internal.web.container', exported: 'true'])
      }
    }
    */
  }
  wtp {
    facet {
      facet name: 'java', version: '1.8'
      facet name: 'jst.web', version: '3.1'
    }
  }  
}

task deployWar(dependsOn: war) << {
  ant.unwar(src: war.archivePath, dest: '/home/peter/Apps/tomcat/apache-tomcat-8.0.21/webapps/'+project.archivesBaseName) 
//  ant.unwar(src: war.archivePath, dest: 'D:\\Apps\\tomcat\\apache-tomcat-8.0.17\\webapps\\'+project.archivesBaseName) 
}

tasks.withType(Test) {
    reports.junitXml.destination = file("${buildDir}/${name}-results")
    reports.html.destination = file("${reporting.baseDir}/${name}")
} 


task intTest(type: Test) {
    testClassesDir = sourceSets.intTest.output.classesDir
    classpath += sourceSets.intTest.runtimeClasspath
    systemProperty "DemoApp.intTest.serviceRestUrl", System.properties['DemoApp.intTest.serviceRestUrl']  
}

task intTestReport(dependsOn: jar, type: TestReport) {
  destinationDir = file("$buildDir/reports/intTests")
  // Include the results from the `test` task in all subprojects
  //reportOn subprojects*.test
}


task accTest(type: Test) {

    systemProperty "browser", "chrome"
//    systemProperty "webdriver.chrome.driver", "C:\\Users\\peter\\Downloads\\chromedriver_win32\\chromedriver.exe"
//    systemProperty "browser", "ie"
//    systemProperty "webdriver.ie.driver", "C:\\Users\\peter\\Downloads\\IEDriverServer_x64_2.43.0\\IEDriverServer.exe"

    ignoreFailures = true
    doFirst {
        String argsString1 = "-javaagent:${configurations.javaAgentSpringInstrument.asPath}"  
        println(argsString1)
      
        // set JVM arguments for the test JVM(s)
        jvmArgs "${argsString1}"

        // Need 'target' directory on *nix systems to get any output
        //file('target').mkdirs()
     
        def filter = System.getProperty('bdd.stories') 
        if (filter == null) {
          filter = '*'
        }
        def stories = sourceSets.test.resources.matching { 
          it.include filter
        }.asPath
        systemProperty('bdd.stories', stories)
    }

    testClassesDir = sourceSets.accTest.output.classesDir
    classpath += sourceSets.accTest.runtimeClasspath
//    systemProperty "DemoApp.intTest.serviceRestUrl", System.properties['DemoApp.intTest.serviceRestUrl']  
}


import groovyx.net.http.HTTPBuilder
import static groovyx.net.http.Method.GET
import static groovyx.net.http.ContentType.TEXT


enum ServerStatus {
    Running, NotRunning, NotDeployed
}


task callTc << {
  logger.quiet "Connecting to Tomcat"

  def authSite = new HTTPBuilder( 'http://localhost:8080' )
  authSite.auth.basic 'admin', 'admin'

  def deployStartCountdown = 10 
  def deployEndCountdown = 60 
  def deploymentIfTestStr = "/" + project.name + ":"
 
  while (true) {
    def status = null

    def listApps = authSite.request( GET, TEXT ) { req ->
      uri.path = '/manager/text/list'
      
      response.success = { resp, reader ->
        println "response status: ${resp.statusLine}"
        
        status = ServerStatus.NotDeployed
        reader.each {
  //        println "Line: -----" + it
  
          if (it.startsWith(deploymentIfTestStr)) {
            println "*****************************" + it
            if (it.startsWith(deploymentIfTestStr + "running:")) {
              status = ServerStatus.Running
            } else {
              status = ServerStatus.NotRunning
            }        
            return true
          }

        }
        System.out << reader
      }
      
      response.failure = { resp ->
        throw new GradleException("Error getting deployment status from Tomcat, error message: " + resp.statusLine)
      }
      
    }

    println "deployStartCountdown " + deployStartCountdown + ", deployEndCountdown " + deployEndCountdown

    if( status == null) {
      println "Error: failed to get status."
      break
    }
    if (deployStartCountdown > 0) {
      if (status == ServerStatus.NotRunning) {
        deployStartCountdown = -1
      } else {
        deployStartCountdown--;
      }
    } else if (deployStartCountdown == 0) {
      println "Error: Deploying does not appear to have started."
      break
    } else if (deployEndCountdown > 0) {
      if (status == ServerStatus.Running) {
        println "Deployment complete."
        break
      }
      deployEndCountdown--
    } else {
      println "Error: Deploying does not appear to have completed."
      break
    }

    Thread.sleep 1000
  } 
}

callTc.dependsOn deployWar
intTest.dependsOn callTc

accTest.dependsOn callTc

