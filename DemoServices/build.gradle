
apply plugin: 'war'
apply plugin: 'eclipse-wtp'


//version = '1.0'

System.properties['javax.xml.accessExternalSchema'] = "file";



eclipse {
  classpath {
 
    //default settings for downloading sources and Javadoc:
/*    downloadSources = true
    downloadJavadoc = true
    file {
      // Classpath entry for Eclipse which changes the order of classpathentries; otherwise no sources for 3rd party jars are shown
      withXml { xml ->
        def node = xml.asNode()
        node.remove( node.find { it.@path == 'org.eclipse.jst.j2ee.internal.web.container' } )
        node.appendNode( 'classpathentry', [ kind: 'con', path: 'org.eclipse.jst.j2ee.internal.web.container', exported: 'true'])
      }
    }
    */
  }
  
  wtp {
    facet {
      facet name: 'java', version: '1.8'
      facet name: 'jst.web', version: '3.1'
    }
  }  
}



configurations {  
    javaAgentSpringInstrument
    dbUnit
    intTestCompile.extendsFrom testCompile
    intTestRuntime.extendsFrom testRuntime
    //    javaAgentOpenJpa  
}


sourceSets {
    intTest {
        java.srcDir file('src/intTest/java')
        resources.srcDir file('src/intTest/resources')
        compileClasspath += sourceSets.main.output + sourceSets.test.output
//        compileClasspath = sourceSets.main.output + configurations.intTest
//        runtimeClasspath = output + compileClasspath
    }
}


task deployWar(dependsOn: war) << {
  ant.unwar(src: war.archivePath, dest: System.properties['tomcat.home']+'/webapps/'+project.archivesBaseName) 
//  ant.unwar(src: war.archivePath, dest: 'D:\\Apps\\tomcat\\apache-tomcat-8.0.17\\webapps\\'+project.archivesBaseName) 
}

dependencies {
  providedCompile "javax.servlet:javax.servlet-api:3.1.0"
  providedCompile "org.projectlombok:lombok:1.16.+"
	compile(
    [ "javax.transaction:javax.transaction-api:1.2" ],
	  [ "org.eclipse.persistence:javax.persistence:2.1.0" ],
	  [ "org.eclipse.persistence:eclipselink:2.5+" ],
	  [ "org.springframework.data:spring-data-mongodb:1.5+" ],
//    [ "cglib:cglib:2.2.2" ],
    [ "cglib:cglib:3.1" ],
    [ "org.springframework.data:spring-data-jpa:1.6.1.RELEASE" ],
    [ "javax.ws.rs:javax.ws.rs-api:2.+" ],
    [ "org.glassfish.jersey.containers:jersey-container-servlet:2.+" ],
    [ "org.glassfish.jersey.media:jersey-media-json-jackson:2.+" ],
    [ "org.glassfish.jersey.ext:jersey-spring3:2.+" ],
    [ "org.mongodb:mongo-java-driver:2.+" ],
    [ project(":DemoServicesApi") ]
	)
  compile( "com.sun.xml.ws:jaxws-rt:2.2.1") {
    exclude module: 'junit'
  }

  testCompile(
    [ "mysql:mysql-connector-java:5.1.31" ],
    [ "org.dbunit:dbunit:2.+" ],
    [ project(":TestingFramework") ]
  )
  testRuntime(
    [ "org.springframework:spring-instrument:4.0.5.RELEASE" ]
  )
  dbUnit(
    [ "mysql:mysql-connector-java:5.1.31" ],
    [ "org.dbunit:dbunit:2.+" ]
  )
  javaAgentSpringInstrument "org.springframework:spring-instrument:4.0.5.RELEASE"
}

task(configDbUnit) << {
  ant.echo(message:  "config db unit" )
  ant.taskdef(name: 'dbunit', 
      classname: 'org.dbunit.ant.DbUnitTask',
      classpath: configurations.testCompile.asPath)
}

test.dependsOn configDbUnit

test.doFirst() {
  String argsString1 = "-javaagent:${configurations.javaAgentSpringInstrument.asPath}"  
  println(argsString1)

  // set JVM arguments for the test JVM(s)
  jvmArgs "${argsString1}"


  ant.echo(message: "Refreshing Db" )
  ant.dbunit(
    driver: "com.mysql.jdbc.Driver",
    url: "jdbc:mysql://localhost:3306/solarSystemTest?sessionVariables=FOREIGN_KEY_CHECKS=0",
    userid: "planetTest",
    password: "plan3t"
  ) {
    operation(type: 'CLEAN_INSERT',src: 'src/test/resources/dbUnitExport.xml', format: 'flat')
  }

}


test {
  systemProperties "db.driver": "com.mysql.jdbc.Driver"
  systemProperties "db.url": "jdbc:mysql://localhost:3306/solarSystemTest"
  systemProperties "db.userid": "planetTest"
  systemProperties "db.password": "plan3t"
}


task updateImages(type:JavaExec) {

  systemProperties "db.driver": "com.mysql.jdbc.Driver"
  systemProperties "db.url": "jdbc:mysql://localhost:3306/solarSystem"
  systemProperties "db.userid": "planet"
  systemProperties "db.password": "plan3t"
   
  main = "me.ineson.demo.helper.DbUpdateImageDimensions"
  classpath = sourceSets.test.runtimeClasspath
}

task exportDb(dependsOn: updateImages) << {
  ant.echo(message: "Exporting db" )

  ant.taskdef(name: 'dbunit', 
      classname: 'org.dbunit.ant.DbUnitTask',
      // classpath: configurations.pmd.asPath
      classpath: configurations.testCompile.asPath)

  ant.dbunit(
    driver: "com.mysql.jdbc.Driver",
    url: "jdbc:mysql://localhost:3306/solarSystem",
    userid: "planet",
    password: "plan3t"
  ) {
    export(dest: 'src/main/domain/dbUnitExport.xml', format: 'flat')
  }
/*  ant.dbunit(
    driver: "com.mysql.jdbc.Driver",
    url: "jdbc:mysql://localhost:3306/solarSystemTest",
    userid: "planetTest",
    password: "plan3t"
  ) {
    export(dest: 'src/main/domain/dbUnitExport.xml', format: 'flat')
  }
  */
}

tasks.withType(Test) {
    reports.junitXml.destination = file("${buildDir}/${name}-results")
    reports.html.destination = file("${reporting.baseDir}/${name}")
} 


task intTest(type: Test) {
    testClassesDir = sourceSets.intTest.output.classesDir
    classpath += sourceSets.intTest.runtimeClasspath
}

task intTestReport(dependsOn: jar, type: TestReport) {
  destinationDir = file("$buildDir/reports/intTests")
  // Include the results from the `test` task in all subprojects
  //reportOn subprojects*.test
}


buildscript {
    repositories {
        mavenCentral()
        maven { url "http://repository.codehaus.org"}
    }
    dependencies {
        classpath(
            [ "org.codehaus.groovy.modules.http-builder:http-builder:0.7.+" ]
        ) 
        
    }
}

import groovyx.net.http.HTTPBuilder
import static groovyx.net.http.Method.GET
import static groovyx.net.http.ContentType.TEXT


enum ServerStatus {
    Running, NotRunning, NotDeployed
}


task callTc << {
  logger.quiet "Connecting to Tomcat"

  def authSite = new HTTPBuilder( 'http://localhost:8080' )
  authSite.auth.basic 'admin', 'admin'

  def deployStartCountdown = 10 
  def deployEndCountdown = 60 
  def deploymentIfTestStr = "/" + project.name + ":"
 
  while (true) {
    def status = null

    def listApps = authSite.request( GET, TEXT ) { req ->
      uri.path = '/manager/text/list'
      
      response.success = { resp, reader ->
        println "response status: ${resp.statusLine}"
        
        status = ServerStatus.NotDeployed
        reader.each {
  //        println "Line: -----" + it
  
          if (it.startsWith(deploymentIfTestStr)) {
            println "*****************************" + it
            if (it.startsWith(deploymentIfTestStr + "running:")) {
              status = ServerStatus.Running
            } else {
              status = ServerStatus.NotRunning
            }        
            return true
          }

        }
        System.out << reader
      }
      
      response.failure = { resp ->
        throw new GradleException("Error getting deployment status from Tomcat, error message: " + resp.statusLine)
      }
      
    }

    println "deployStartCountdown " + deployStartCountdown + ", deployEndCountdown " + deployEndCountdown

    if( status == null) {
      println "Error: failed to get status."
      break
    }
    if (deployStartCountdown > 0) {
      if (status == ServerStatus.NotRunning) {
        deployStartCountdown = -1
      } else {
        deployStartCountdown--;
      }
    } else if (deployStartCountdown == 0) {
      println "Error: Deploying does not appear to have started."
      break
    } else if (deployEndCountdown > 0) {
      if (status == ServerStatus.Running) {
        println "Deployment complete."
        break
      }
      deployEndCountdown--
    } else {
      println "Error: Deploying does not appear to have completed."
      break
    }

    Thread.sleep 1000
  } 
}


callTc.dependsOn deployWar
intTest.dependsOn callTc


